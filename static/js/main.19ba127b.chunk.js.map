{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","className","MovieGenre","_ref3","genre","Movie","_ref","title","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","greeting","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","res","json","data","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA6BA,SAASA,EAATC,GAAqC,IAAdC,EAAcD,EAAdC,OAAOC,EAAOF,EAAPE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,UAAU,iBAI9C,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAME,UAAU,eAAeG,EAA/B,QAiBOC,MAlDf,SAAAC,GAAkD,IAAjCC,EAAiCD,EAAjCC,MAAOZ,EAA0BW,EAA1BX,OAAOa,EAAmBF,EAAnBE,OAAOC,EAAYH,EAAZG,SAClC,OACIZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAEXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAEXJ,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKW,KAEtCV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACXJ,EAAAC,EAAAC,cAAA,UAAKQ,GACLV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACdO,EAAOE,IAAI,SAACN,EAAMO,GAAP,OAAgBd,EAAAC,EAAAC,cAACG,EAAD,CAAYE,MAAOA,EAAOQ,IAAKD,OAE3Dd,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBACbJ,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACAgB,KAAML,EACNM,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,gBC4BTC,6MA3CbC,MAAQ,CACNC,SAAU,YAGZC,cAAgB,WAUd,OATeC,EAAKH,MAAMI,OAAOd,IAAI,SAACe,GAEpC,OADAC,QAAQC,IAAIF,GACL5B,EAAAC,EAAAC,cAAC6B,EAAD,CACLrB,MAAOkB,EAAMI,cACblC,OAAQ8B,EAAMK,mBACdtB,OAAQiB,EAAMjB,OACdC,SAAUgB,EAAMhB,SAChBG,IAAKa,EAAMM,UAiBjBC,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAApC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUf,EAAKgB,WADf,OACLf,EADKY,EAAAI,KAEXjB,EAAKkB,SAAS,CACZjB,WAHS,wBAAAY,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WACT,OAAOK,MAAM,iEACVC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKxB,SACvByB,MAAM,SAAAC,GAAG,OAAIxB,QAAQC,IAAIuB,4HAxBrB,IACA1B,EAAUmB,KAAKvB,MAAfI,OACP,OAEE3B,EAAAC,EAAAC,cAAA,OAAKE,UAAWuB,EAAQ,MAAQ,gBAC7BmB,KAAKvB,MAAMI,OAASmB,KAAKrB,gBAAkB,uDAKhDqB,KAAKX,oBA9BSmB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.19ba127b.chunk.js","sourcesContent":["import React from 'react';\nimport './Movie.css';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nfunction Movie({ title, poster,genres,synopsis }) {\n    return (\n        <div className=\"Movie\">\n\n            <div className=\"Movie_Column\">\n\n                <MoviePoster poster={poster} alt={title} />\n            </div>\n            <div className=\"Movie_Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie_Genres\">\n                {genres.map((genre,index) =><MovieGenre genre={genre} key={index}/>)}\n                </div>\n                <p className=\"Movie_Synopsis\">\n                <LinesEllipsis \n                text={synopsis} \n                maxLine='3'\n                ellipsis=\" ...\"\n                trimRight\n                basedOn=\"letters\"\n                /></p>\n            </div>\n        </div>\n    )\n}\nfunction MoviePoster({ poster,alt }) {\n    return (\n        <img src={poster} alt={alt} className=\"Movie_Poster\" />\n\n    )\n}\nfunction MovieGenre({genre}){\n    return(\n        <span className=\"Movie_Genre\">{genre}&nbsp;</span>\n    )\n}\nMovieGenre.propTypes={\n\n}\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt:PropTypes.string.isRequired\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n  componentWillMount() {\n\n  }\n  state = {\n    greeting: \"hello!\",\n\n  }\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      console.log(movie)\n      return <Movie\n        title={movie.title_english}\n        poster={movie.medium_cover_image}\n        genres={movie.genres} \n        synopsis={movie.synopsis}\n        key={movie.id} />\n    })\n    return movies\n  }\n  render() {\n    const {movies} = this.state;\n    return (\n\n      <div className={movies? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n  componentDidMount() {\n    this._getMovies()\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n\n  }\n  _callApi = () => {\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\")\n      .then(res => res.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err))\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}